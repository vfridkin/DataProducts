library(swirl)
swirl()
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
swirl()
swirl()
swirl()
11/12
deck
52
1/13
1/(13*5)
0
3/13
2/51
swirl()
swirl()
swirl()
swirl()
swirl()
library(swirl)
swirl()
0.997*0.001
(1-0.997)*0.999
0.985*0.999
(1-0.985)*0.999
0.997*0.001/(0.997*0.001 + (1-0.985)*0.999)
swirl()
library(swirl)
swirl()
quit()
rm(list = ls())
library(swirl)
swirl()
delete_progress("Vlad")
swirl()
rm(list  = ls())
swirl()
library(swirl)
swirl()
color(10)
colors(10)
sample(colors(),10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
Oxcc
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch = 19, col = rgb(0,.5, .5))
plot(x, y, pch = 19, col = rgb(0,.5, .5, 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
1/10000
10000/100
sessionInfo()
rm(list = ls())
ls()
library(swirl)
swirl()
play()
T+F
F+F+F
help("mean")
help("read.csv")
nxt()
str(mpg)
qplot(displ~hwy, mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~.)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
quit()
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
influence.measures(fit)
rm(list = ls())
library(swirl); swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drve, hwy, data = pmg, geom = "boxplot")
qplot(drve, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = mnf)
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~.)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
install.packages("AppliedPredictiveModelling")
R.version()
R.version
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
UpdateR()
UpdateR
library(installr)
updateR()
R.Version()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
concrete.index
concrete$index
which(concrete)
type(concrete)
str(concrete)
qplot(CompressiveStrength, 1:nrow(concrete), data = concrete, col = FlyAsh)
qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col = FlyAsh)
library(Hmisc)
?cut2
for (i in 1:2) {}
for (i in 1:2) {
print(qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col = FlyAsh))
}
for (colName in names(concrete)) {
print(qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col = colName)
}
for (colName in names(concrete)) {
print(qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col = colName))
}
for (colName in names(concrete)) {
print(qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col = concrete[[colName]]))
}
for (colName in names(concrete)) {
print(qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col = concrete[[colName]], legend.title = colName))
}
for (colName in names(concrete)) {
print(qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col = concrete[[colName]])
+ opts(legend.title=colName))
}
for (colName in names(concrete)) {
print(qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col = concrete[[colName]])
+ labs(pointtype=colName))
}
for (colName in names(concrete)) {
print(
qplot(1:nrow(concrete), CompressiveStrength, data = concrete)
+ guides(col=concrete[[colName]])
)
}
for (colName in names(concrete)) {
print(
qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col=concrete[[colName]])
)
}
for (colName in names(concrete)) {
print(
qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col=concrete[[colName]])
+ labs(fill=colName)
)
}
for (colName in names(concrete)) {
print(
qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col=concrete[[colName]])
+ labs(fill=colName)
)
}
for (colName in names(concrete)) {
print(
qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col=concrete[[colName]], title = colName)
)
}
for (colName in names(concrete)) {
print(
qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col=concrete[[colName]], main = colName)
)
}
for (colName in names(concrete)) {
print(
qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col=concrete[[colName]], main = colName)
)
}
cutFlyAsh <- cut2(concrete$FlyAsh, g= 10)
concrete$cutFlyAsh <- cut2(concrete$FlyAsh, g= 10)
qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col=cutFlyAsh)
)
concrete$cutFlyAsh <- cut2(concrete$FlyAsh, g= 4)
qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col=cutFlyAsh)
concrete$cutFlyAsh <- cut2(concrete$FlyAsh, g= 3)
qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col=cutFlyAsh)
concrete$cutFlyAsh <- cut2(concrete$FlyAsh, g= 2)
qplot(1:nrow(concrete), CompressiveStrength, data = concrete, col=cutFlyAsh)
hist(concrete$SuperPlasticizer)
hist(concrete$Superplasticizer)
range(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer+1)
)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
preProcess((training[grep('^IL',names(training))]), method='pca', thresh = 0.9)$numComp
summary(mixtures$Superplasticizer)
preProcess((training[grep('^IL',names(training))]), method='pca', thresh = 0.9)
trdata <- training[grep('^IL',names(training))]
train(training$diagnosis ~ ., method='glm', data = trdata)$results$Accuracy
train(training$diagnosis ~ .,
method='glm',
preProcess='pca',
trControl = trainControl(preProcOptions = list(thresh = 0.8)),
data = trdata)$results$Accuracy
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
train(training$diagnosis ~ ., method='glm', data = trdata)$results$Accuracy
train(training$diagnosis ~ .,
method='glm',
preProcess='pca',
trControl = trainControl(preProcOptions = list(thresh = 0.8)),
data = trdata)$results$Accuracy
trdata <- training[grep('^IL',names(training))]
train(training$diagnosis ~ ., method='glm', data = trdata)$results$Accuracy
train(training$diagnosis ~ .,
method='glm',
preProcess='pca',
trControl = trainControl(preProcOptions = list(thresh = 0.8)),
data = trdata)$results$Accuracy
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess((training[grep('^IL',names(training))]), method='pca', thresh = 0.9)
preProcess((training[grep('^IL',names(training))]), method='pca', thresh = 0.9)
preProcess((training[grep('^IL',names(training))]), method='pca', thresh = 0.8)
library(xlsx)
library(rJava)
library(rJava)
library(rJava)
shiny::runApp('DataProducts/Assignment/AusPop')
shiny::runApp('DataProducts/Assignment/AusPop')
shiny::runApp('DataProducts/Assignment/AusPop')
shiny::runApp('DataProducts/Assignment/AusPop')
shiny::runApp('DataProducts/Assignment/AusPop')
shiny::runApp('DataProducts/Assignment/AusPop')
shiny::runApp('DataProducts/Assignment/AusPop')
shiny::runApp('DataProducts/Assignment/AusPop')
shiny::runApp('DataProducts/Assignment/AusPop')
