mean(x)
x <- x - mean(x)
x
mean(x)
std(x)
sd(x)
y <- x/sd(x)
sd(y)
y
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
library(swirl)
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
swirl()
3.5
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
x
1
info()
0.8
0.32
0.8*1.6/2
0.8*1.6/2
mypdf
integrate(mypdf, 0, 1.6)
sqrt(2)
quit
quit()
rm(list = ls())
ls()
swirl()
library(swirl)
swirl()
swirl()
plot(child~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
fit <- lm(child~parent, data = galton)
summary(fit)
mean(fit$residuals)
cov(fir$residuals, galton$parent)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est())
varEst <- var(est
)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cor(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(galton$child, galton$parent)
cor(gpa_nor,gch_nor)
lnor <- lm(gpa_nor~gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
play()
a <- xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
class(a)
nxt()
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p<- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout = c(2,1))
v1
v2
myedit("plot.R")
myedit("plot1.R")
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
medit("myLabels.R")
mydit("myLabels.R")
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat|color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
rm(list = ls())
library(swirl)
swirl()
dice_sqr
ex2_fair <- dice_sqr* dice_fair
ex2_fair <- sum(dice_sqr* dice_fair)
ex2_fair - 3.5^2
ex2_fair <- sum(dice_sqr* dice_high) - mean(dice_high)^2
sum(dice_high * dice_sqr)-edh^2
swirl()
fit <- lm(child ~ parent, data = galton)
sum(fit$residuals^2)/(n-2)
sqrt(sum(fit$residuals^2))/(n-2)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(lm(child ~ parent, data = galton))
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
delete_progress(Vlad)
delete_progress("Vlad")
swirl()
rm(list = ls())
swirl()
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y ~ x)
fit <- lm(y~x)
summary(fit)
sd(fit$residuals)
fit <- lm(mpg ~ weight, mtcars)
data(mtcars)
fit <- lm(mpg ~ weight, mtcars)
fit <- lm(mpg ~ weight, data = mtcars)
head(mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
summary(fit)
mean(wt)
mean(mtcars$wt)
mean(mtcars$mpg)
3.046/sqrt(30)
mean(mtcars$mpg)-2*0.556121
?mtcars
mean(mtcars$mpg)-2*0.5591
plot(fit)
plot(mtcars$mpg, mtcars$wt)
rm(list = ls())
library(swirl);swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
lm(child ~ 2, galton)
lm(child ~ 1, galton)
lm(child ~ 2, galton)
lm(child ~ -1, galton)
lm(child ~ 1.1, galton)
lm(child ~ 10, galton)
lm(child ~ 0.99, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1,trees2)
lapply(list(fit, fit2), coef)
swirl()
all <- lm(.~Fertility, data = swiss)
all <- lm(. ~ Fertility, data = swiss)
all <- lm(Fertility ~ ., data = swiss)
summary(all)
summary(lm(Fertility ~ agriculture, swiss))
summary(lm(Fertility ~ Agriculture, data = swiss))
cor(Examination, Education, data = swiss)
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility~. + ec, data = swiss)
all - coef(efit)
coef(all) - coef(efit)
all$coefficients-efit$coefficients
names(mtcars)
fit <- lm(mpg ~ cyl + wt, mtcars)
summary(fit)
summary(fit)$coefficients
summary(fit)$coefficients$Estimate
summary(fit)$coefficients[1]
summary(fit)$coefficients[2]
summary(fit)$coefficients[2]*4
help(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
-6.0709*4
quite
quit
quit()
rm(list = ls())
library(swirl); swirl()
a = c(140, 138, 150, 148, 135)
a
b <- c(132, 135, 151, 146, 130)
b
t.test(a, b, paired = T)
t.test(a, b, paired = T, alt = "two.sided")
qnorm(0.95)
1100 - qnorm(0.95)*(30/sqrt(9))
1100 - qnorm(0.975)*(30/sqrt(9))
binom.test(c(3,1))
poisson.test(1787, 10, r = 1/100, alt = "one.sided")
poisson.test(1787, 10, r = 1/100, alt = "greater")
poisson.test(10/1787, r = 1/100, alt = "greater")
poisson.test(c(10,1787), r = 1/100, alt = "greater")
poisson.test(10, 1787, r = 1/100, alt = "greater")
poisson.test(10, 1787, r = 1/100, alt = "lower")
poisson.test(10, 1787, r = 1/100, alt = "less")
s <- sqrt((1.5^2 + 1.8^2)/2)
s
4/(s*2/9)
4/(s*sqrt(2/9)
)
power.t.test(n = 100, sd = 0.04, alt = "one.sided", delta = 0.01)
power.t.test(power = 0.9, sd = 0.04, alt = "one.sided", delta = 0.01)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(rexp(40, 0.2))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
variance(mns)
var(mns)
sqrt(var(mns))
std(mns)
dev(mns)
sdev(mns)
sd(mns)
hist(mns)
seed(123)
set.seed(1)
set.seed(0)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
set.seed(1)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
lambda <- 0.2
lambda
lambda <- 0.2
sampleSize <- 40
mns <- NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(sampleSize, lambda)))
head(mns)
mns
ggplot(mns)
library(ggplot2)
ggplot(mns)
ggplot(mns) + geom_histogram()
ggplot(mns) + geom_histogram(binwidth = 10)
ggplot(aes(mns)) + geom_histogram()
mnsdf <- as.data.frame(mns)
mnsdf
ggplot(aes(mns)) + geom_histogram()
ggplot(mns) + geom_histogram()
ggplot(mns, aes(mns)) + geom_histogram()
mnsdf
head(mnsdf)
qplot(mns, geom="histogram")
ggplot(data=mns, aes(mns)) + geom_histogram()
mns$mns
names(mns)
ggplot(data=mnsdf, aes(mns)) + geom_histogram()
ggplot(data=mnsdf, aes(mns)) + geom_histogram(binwidth = 1)
ggplot(data=mnsdf, aes(mns)) + geom_histogram(binwidth = 0.2)
ggplot(data=mnsdf, aes(mns)) + geom_histogram(binwidth = 0.5)
ggplot(data=mnsdf, aes(mns)) + geom_histogram(col = "white", fill = "grey", binwidth = 0.5)
head(mns)
sd(mns)
mean(mns)
mean(mns)
mean(mns)
set.seed(1)
lambda <- 0.2
sampleSize <- 40
mns <- NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(sampleSize, lambda)))
mean(mns)
sd(mns)
vars <- NULL
for (i in 1 : 1000) vars = c(vars, var(rexp(sampleSize, lambda)))
mean(var)
head(var)
mean(vars)
hist(vars)
mns2 <- NULL
norms <- rexp(1000, lambda)
hist(norms)
norms <- rexp(10000, lambda)
hist(norms)
hist(norms, breaks = 1)
hist(norms, breaks = 0.01)
hist(norms, breaks = 100)
norms <- NULL
for (i in 1 : 1000) norms <- c(norms, rexp(1000, lambda))
hist(norms)
norms <- NULL
for (i in 1 : 1000) norms <- c(norms, mean(rexp(1000, lambda))
)
hist(norms)
hist(norms, breaks = 100)
25/40
ayana_age <- 5
atlas_age <- 2
ayana_age + atlas_age
rm(list = ls())
clear
clear()
library(ggplot2)
library(openxlsx)
library(dplyr)
library(tidyr)
# Read data.frame from XL worksheet
abs <- read.xlsx("data/abs.xlsx", sheet = "reformatted")
# Non-numeric rows are summary of existing data, except for age>100
abs$Age[abs$Age == "100 and over"] <- "100" # 100 now represents >100
# Convert Age to numeric and remove non-numeric rows to remove duplicate summary data
abs$Age <- as.numeric(abs$Age)
abs <- abs[!is.na(abs$Age),]
setwd("~/DataProducts/AusPop")
abs <- read.xlsx("data/abs.xlsx", sheet = "reformatted")
install.packages("openxlsx")
library(ggplot2)
library(openxlsx)
library(dplyr)
library(tidyr)
abs <- read.xlsx("data/abs.xlsx", sheet = "reformatted")
abs$Age[abs$Age == "100 and over"] <- "100" # 100 now represents >100
# Convert Age to numeric and remove non-numeric rows to remove duplicate summary data
abs$Age <- as.numeric(abs$Age)
abs <- abs[!is.na(abs$Age),]
abs <- abs %>% gather("gender", "count", Males, Females)
abs
head(abs)
View(abs)
baseYear <- "2012"
absBaseYear <- abs %>% filter(Time == baseYear) %>% rename(countBase = count) %>% select(-Time)
View(absBaseYear)
abs <- left_join(abs, absBaseYear)
any(is.na(abs$countBase))
abs$delta <- abs$count - abs$countBase
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x
input$yearRange
x <- input$yearRange
x[1]
x[2]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
gsub("the", "hello", "the the")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(data)
shiny::runApp()
View(absBaseYear)
View(data)
shiny::runApp()
shiny::runApp()
View(data)
View(absBaseYear)
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(absBaseYear)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(ggplot2)
library(openxlsx)
library(dplyr)
library(tidyr)
library(scales)
View(abs)
library(ggplot2)
library(openxlsx)
library(dplyr)
library(tidyr)
library(scales)
# Read data.frame from XL worksheet
abs <- read.xlsx("data/abs.xlsx", sheet = "reformatted")
# Non-numeric rows are summary of existing data, except for age>100
abs$Age[abs$Age == "100 and over"] <- "100" # 100 now represents >100
# Convert Age to numeric and remove non-numeric rows to remove duplicate summary data
abs$Age <- as.numeric(abs$Age)
abs <- abs[!is.na(abs$Age),]
# Combine gender counts into a single count column
abs <- abs %>%
gather("gender", "count", Males, Females) %>%
select(-gender) %>% group_by(Time, Age) %>% summarise(count = sum(count))
View(abs)
View(abs)
abs <- read.xlsx("data/abs.xlsx", sheet = "reformatted")
View(abs)
# Non-numeric rows are summary of existing data, except for age>100
abs$Age[abs$Age == "100 and over"] <- "100" # 100 now represents >100
# Convert Age to numeric and remove non-numeric rows to remove duplicate summary data
abs$Age <- as.numeric(abs$Age)
abs <- abs[!is.na(abs$Age),]
View(abs)
# Combine gender counts into a single count column
abs <- abs %>%
gather("gender", "count", Males, Females) %>%
select(-gender) %>% group_by(Time, Age) %>% summarise(count = sum(count))
install.packages("ggExtra")
library(ggExtra)
shiny::runApp()
